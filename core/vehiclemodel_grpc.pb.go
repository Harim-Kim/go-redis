// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package thisisanexample

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VehiclemodelServiceClient is the client API for VehiclemodelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VehiclemodelServiceClient interface {
	RegisterVehicleModel(ctx context.Context, in *RegisterVehicleModelRequest, opts ...grpc.CallOption) (*VehicleModelID, error)
	RegisterImage(ctx context.Context, in *VehiclemodelImage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetImage(ctx context.Context, in *VehicleModelID, opts ...grpc.CallOption) (*VehiclemodelImage, error)
	GetVehicleModel(ctx context.Context, in *VehicleModelID, opts ...grpc.CallOption) (*GetVehicleModelResponse, error)
	GetVehicleSimpleModel(ctx context.Context, in *VehicleModelID, opts ...grpc.CallOption) (*GetVehicleSimpleModelResponse, error)
	ListVehicleModel(ctx context.Context, in *ListVehicleModelRequest, opts ...grpc.CallOption) (*VehicleModelList, error)
	UpdateVehicleModel(ctx context.Context, in *UpdateVehicleModelRequest, opts ...grpc.CallOption) (*GetVehicleModelResponse, error)
	DeleteVehicleModel(ctx context.Context, in *VehicleModelID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CountVehicleModel(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CountResponse, error)
}

type vehiclemodelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVehiclemodelServiceClient(cc grpc.ClientConnInterface) VehiclemodelServiceClient {
	return &vehiclemodelServiceClient{cc}
}

func (c *vehiclemodelServiceClient) RegisterVehicleModel(ctx context.Context, in *RegisterVehicleModelRequest, opts ...grpc.CallOption) (*VehicleModelID, error) {
	out := new(VehicleModelID)
	err := c.cc.Invoke(ctx, "/core.VehiclemodelService/RegisterVehicleModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehiclemodelServiceClient) RegisterImage(ctx context.Context, in *VehiclemodelImage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/core.VehiclemodelService/RegisterImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehiclemodelServiceClient) GetImage(ctx context.Context, in *VehicleModelID, opts ...grpc.CallOption) (*VehiclemodelImage, error) {
	out := new(VehiclemodelImage)
	err := c.cc.Invoke(ctx, "/core.VehiclemodelService/GetImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehiclemodelServiceClient) GetVehicleModel(ctx context.Context, in *VehicleModelID, opts ...grpc.CallOption) (*GetVehicleModelResponse, error) {
	out := new(GetVehicleModelResponse)
	err := c.cc.Invoke(ctx, "/core.VehiclemodelService/GetVehicleModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehiclemodelServiceClient) GetVehicleSimpleModel(ctx context.Context, in *VehicleModelID, opts ...grpc.CallOption) (*GetVehicleSimpleModelResponse, error) {
	out := new(GetVehicleSimpleModelResponse)
	err := c.cc.Invoke(ctx, "/core.VehiclemodelService/GetVehicleSimpleModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehiclemodelServiceClient) ListVehicleModel(ctx context.Context, in *ListVehicleModelRequest, opts ...grpc.CallOption) (*VehicleModelList, error) {
	out := new(VehicleModelList)
	err := c.cc.Invoke(ctx, "/core.VehiclemodelService/ListVehicleModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehiclemodelServiceClient) UpdateVehicleModel(ctx context.Context, in *UpdateVehicleModelRequest, opts ...grpc.CallOption) (*GetVehicleModelResponse, error) {
	out := new(GetVehicleModelResponse)
	err := c.cc.Invoke(ctx, "/core.VehiclemodelService/UpdateVehicleModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehiclemodelServiceClient) DeleteVehicleModel(ctx context.Context, in *VehicleModelID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/core.VehiclemodelService/DeleteVehicleModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehiclemodelServiceClient) CountVehicleModel(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, "/core.VehiclemodelService/CountVehicleModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VehiclemodelServiceServer is the server API for VehiclemodelService service.
// All implementations must embed UnimplementedVehiclemodelServiceServer
// for forward compatibility
type VehiclemodelServiceServer interface {
	RegisterVehicleModel(context.Context, *RegisterVehicleModelRequest) (*VehicleModelID, error)
	RegisterImage(context.Context, *VehiclemodelImage) (*emptypb.Empty, error)
	GetImage(context.Context, *VehicleModelID) (*VehiclemodelImage, error)
	GetVehicleModel(context.Context, *VehicleModelID) (*GetVehicleModelResponse, error)
	GetVehicleSimpleModel(context.Context, *VehicleModelID) (*GetVehicleSimpleModelResponse, error)
	ListVehicleModel(context.Context, *ListVehicleModelRequest) (*VehicleModelList, error)
	UpdateVehicleModel(context.Context, *UpdateVehicleModelRequest) (*GetVehicleModelResponse, error)
	DeleteVehicleModel(context.Context, *VehicleModelID) (*emptypb.Empty, error)
	CountVehicleModel(context.Context, *emptypb.Empty) (*CountResponse, error)
	mustEmbedUnimplementedVehiclemodelServiceServer()
}

// UnimplementedVehiclemodelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVehiclemodelServiceServer struct {
}

func (UnimplementedVehiclemodelServiceServer) RegisterVehicleModel(context.Context, *RegisterVehicleModelRequest) (*VehicleModelID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterVehicleModel not implemented")
}
func (UnimplementedVehiclemodelServiceServer) RegisterImage(context.Context, *VehiclemodelImage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterImage not implemented")
}
func (UnimplementedVehiclemodelServiceServer) GetImage(context.Context, *VehicleModelID) (*VehiclemodelImage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImage not implemented")
}
func (UnimplementedVehiclemodelServiceServer) GetVehicleModel(context.Context, *VehicleModelID) (*GetVehicleModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVehicleModel not implemented")
}
func (UnimplementedVehiclemodelServiceServer) GetVehicleSimpleModel(context.Context, *VehicleModelID) (*GetVehicleSimpleModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVehicleSimpleModel not implemented")
}
func (UnimplementedVehiclemodelServiceServer) ListVehicleModel(context.Context, *ListVehicleModelRequest) (*VehicleModelList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVehicleModel not implemented")
}
func (UnimplementedVehiclemodelServiceServer) UpdateVehicleModel(context.Context, *UpdateVehicleModelRequest) (*GetVehicleModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVehicleModel not implemented")
}
func (UnimplementedVehiclemodelServiceServer) DeleteVehicleModel(context.Context, *VehicleModelID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVehicleModel not implemented")
}
func (UnimplementedVehiclemodelServiceServer) CountVehicleModel(context.Context, *emptypb.Empty) (*CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountVehicleModel not implemented")
}
func (UnimplementedVehiclemodelServiceServer) mustEmbedUnimplementedVehiclemodelServiceServer() {}

// UnsafeVehiclemodelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VehiclemodelServiceServer will
// result in compilation errors.
type UnsafeVehiclemodelServiceServer interface {
	mustEmbedUnimplementedVehiclemodelServiceServer()
}

func RegisterVehiclemodelServiceServer(s grpc.ServiceRegistrar, srv VehiclemodelServiceServer) {
	s.RegisterService(&VehiclemodelService_ServiceDesc, srv)
}

func _VehiclemodelService_RegisterVehicleModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterVehicleModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehiclemodelServiceServer).RegisterVehicleModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.VehiclemodelService/RegisterVehicleModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehiclemodelServiceServer).RegisterVehicleModel(ctx, req.(*RegisterVehicleModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehiclemodelService_RegisterImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VehiclemodelImage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehiclemodelServiceServer).RegisterImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.VehiclemodelService/RegisterImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehiclemodelServiceServer).RegisterImage(ctx, req.(*VehiclemodelImage))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehiclemodelService_GetImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VehicleModelID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehiclemodelServiceServer).GetImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.VehiclemodelService/GetImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehiclemodelServiceServer).GetImage(ctx, req.(*VehicleModelID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehiclemodelService_GetVehicleModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VehicleModelID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehiclemodelServiceServer).GetVehicleModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.VehiclemodelService/GetVehicleModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehiclemodelServiceServer).GetVehicleModel(ctx, req.(*VehicleModelID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehiclemodelService_GetVehicleSimpleModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VehicleModelID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehiclemodelServiceServer).GetVehicleSimpleModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.VehiclemodelService/GetVehicleSimpleModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehiclemodelServiceServer).GetVehicleSimpleModel(ctx, req.(*VehicleModelID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehiclemodelService_ListVehicleModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVehicleModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehiclemodelServiceServer).ListVehicleModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.VehiclemodelService/ListVehicleModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehiclemodelServiceServer).ListVehicleModel(ctx, req.(*ListVehicleModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehiclemodelService_UpdateVehicleModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVehicleModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehiclemodelServiceServer).UpdateVehicleModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.VehiclemodelService/UpdateVehicleModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehiclemodelServiceServer).UpdateVehicleModel(ctx, req.(*UpdateVehicleModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehiclemodelService_DeleteVehicleModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VehicleModelID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehiclemodelServiceServer).DeleteVehicleModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.VehiclemodelService/DeleteVehicleModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehiclemodelServiceServer).DeleteVehicleModel(ctx, req.(*VehicleModelID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehiclemodelService_CountVehicleModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehiclemodelServiceServer).CountVehicleModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.VehiclemodelService/CountVehicleModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehiclemodelServiceServer).CountVehicleModel(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// VehiclemodelService_ServiceDesc is the grpc.ServiceDesc for VehiclemodelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VehiclemodelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "core.VehiclemodelService",
	HandlerType: (*VehiclemodelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterVehicleModel",
			Handler:    _VehiclemodelService_RegisterVehicleModel_Handler,
		},
		{
			MethodName: "RegisterImage",
			Handler:    _VehiclemodelService_RegisterImage_Handler,
		},
		{
			MethodName: "GetImage",
			Handler:    _VehiclemodelService_GetImage_Handler,
		},
		{
			MethodName: "GetVehicleModel",
			Handler:    _VehiclemodelService_GetVehicleModel_Handler,
		},
		{
			MethodName: "GetVehicleSimpleModel",
			Handler:    _VehiclemodelService_GetVehicleSimpleModel_Handler,
		},
		{
			MethodName: "ListVehicleModel",
			Handler:    _VehiclemodelService_ListVehicleModel_Handler,
		},
		{
			MethodName: "UpdateVehicleModel",
			Handler:    _VehiclemodelService_UpdateVehicleModel_Handler,
		},
		{
			MethodName: "DeleteVehicleModel",
			Handler:    _VehiclemodelService_DeleteVehicleModel_Handler,
		},
		{
			MethodName: "CountVehicleModel",
			Handler:    _VehiclemodelService_CountVehicleModel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vehiclemodel.proto",
}
